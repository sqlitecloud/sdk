{"version":3,"file":"sqlitecloud-nodejs-sdk.min.js","mappings":"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","sources":["webpack://SQLiteCloud/webpack/universalModuleDefinition","webpack://SQLiteCloud/./src/core/index.js","webpack://SQLiteCloud/./src/core/sqlitecloud.js","webpack://SQLiteCloud/external umd \"lz4\"","webpack://SQLiteCloud/external umd \"net\"","webpack://SQLiteCloud/external umd \"tls\"","webpack://SQLiteCloud/webpack/bootstrap","webpack://SQLiteCloud/webpack/runtime/define property getters","webpack://SQLiteCloud/webpack/runtime/hasOwnProperty shorthand","webpack://SQLiteCloud/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"tls\"), require(\"net\"), require(\"lz4\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"tls\", \"net\", \"lz4\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SQLiteCloud\"] = factory(require(\"tls\"), require(\"net\"), require(\"lz4\"));\n\telse\n\t\troot[\"SQLiteCloud\"] = factory(root[\"tls\"], root[\"net\"], root[\"lz4\"]);\n})(this, (__WEBPACK_EXTERNAL_MODULE__535__, __WEBPACK_EXTERNAL_MODULE__548__, __WEBPACK_EXTERNAL_MODULE__43__) => {\nreturn ","module.exports = require('./sqlitecloud.js').default;\r\n","const tls = require('tls');\r\nvar net = require('net');\r\nvar lz4 = require('lz4')\r\n\r\nconst logThis = (id = \"SQLiteCloud\", msg) => {\r\n  const dateObject = new Date();\r\n  // adjust 0 before single digit date\r\n  const date = (`0 ${dateObject.getDate()}`).slice(-2);\r\n  // current month\r\n  const month = (`0${dateObject.getMonth() + 1}`).slice(-2);\r\n  // current year\r\n  const year = dateObject.getFullYear();\r\n  // current hours\r\n  const hours = dateObject.getHours();\r\n  // current minutes\r\n  const minutes = dateObject.getMinutes();\r\n  // current seconds\r\n  const seconds = dateObject.getSeconds();\r\n  // current milliseconds\r\n  const milliseconds = dateObject.getMilliseconds()\r\n  // prints date & time in YYYY/MM/DD HH:MM:SS format\r\n  const prefix = `${year}/${month}/${date} ${hours}:${minutes}:${seconds}:${milliseconds}`;\r\n  console.log(`!!!!!!!!! ${id}: ${prefix} - ${msg}`);\r\n}\r\n// defined in https://github.com/sqlitecloud/sdk/blob/master/PROTOCOL.md\r\nconst CMD_STRING = '+'\r\nconst CMD_ZEROSTRING = '!'\r\nconst CMD_ERROR = '-'\r\nconst CMD_INT = ':'\r\nconst CMD_FLOAT = ','\r\nconst CMD_ROWSET = '*'\r\nconst CMD_ROWSET_CHUNK = '/'\r\nconst CMD_JSON = '#'\r\nconst CMD_RAWJSON = '{'\r\nconst CMD_NULL = '_'\r\nconst CMD_BLOB = '$'\r\nconst CMD_COMPRESSED = '%'\r\nconst CMD_PUBSUB = '|'\r\nconst CMD_COMMAND = '^'\r\nconst CMD_RECONNECT = '@'\r\nconst CMD_ARRAY = '='\r\n/*  \r\nthis method analyzes the first character to check if corresponding data type has LEN\r\n*/\r\nconst hasCommandlen = (firstCharacter) => {\r\n  return ((firstCharacter == CMD_INT) || (firstCharacter == CMD_FLOAT) || (firstCharacter == CMD_NULL)) ? false : true;\r\n}\r\n/*  \r\nthis method analyzes a command with explict LEN and extract it\r\n*/\r\nconst parseLen = (data) => {\r\n  return parseInt(data.subarray(1, data.indexOf(\" \")).toString('utf8'));\r\n}\r\n/*\r\nthis method receive a compressed buffer, uncompress it using lz4 algorithm and return the uncompressed buffer and corresponding datatype\r\n*/\r\nconst uncompressBuffer = (buffer) => {\r\n  var spaceIndex = buffer.indexOf(\" \");\r\n  buffer = buffer.subarray(spaceIndex + 1, buffer.length);\r\n  //extract compressed size\r\n  var compressedSize = parseInt(buffer.subarray(0, buffer.indexOf(\" \") + 1).toString('utf8'));\r\n  buffer = buffer.subarray(buffer.indexOf(\" \") + 1, buffer.length);\r\n  //extract uncompressed size\r\n  var uncompressedSize = parseInt(buffer.subarray(0, buffer.indexOf(\" \") + 1).toString('utf8'));\r\n  buffer = buffer.subarray(buffer.indexOf(\" \") + 1, buffer.length);\r\n  //extract compressed dataType\r\n  var dataType = buffer.subarray(0, 1).toString('utf8');\r\n  var uncompressedBuffer = Buffer.alloc(uncompressedSize);\r\n  var uncompressionResult = lz4.decodeBlock(buffer.subarray(buffer.length - compressedSize, buffer.length), uncompressedBuffer);\r\n  buffer = Buffer.concat([buffer.subarray(0, buffer.length - compressedSize), uncompressedBuffer])\r\n  if (uncompressionResult <= 0 || uncompressionResult !== uncompressedSize) {\r\n    throw new Error(`lz4 uncompression error error at offset ${uncompressionResult}`)\r\n  }\r\n  return {\r\n    buffer: buffer,\r\n    dataType: dataType\r\n  }\r\n}\r\n/*\r\nthis method received the complete buffer and parse it based on the current dataType\r\n*/\r\nconst parseData = (buffer) => {\r\n  var parsedData;\r\n  var dataType = Array.isArray(buffer) ? buffer[0].subarray(0, 1).toString('utf8') : buffer.subarray(0, 1).toString('utf8');\r\n  var spaceIndex = buffer.indexOf(\" \");\r\n  if (dataType === CMD_COMPRESSED) {\r\n    if (Array.isArray(buffer)) {\r\n      //CMD_ROWSET_CHUNK case\r\n      for (var i = 0; i < buffer.length; i++) {\r\n        const uncompressionResult = uncompressBuffer(buffer[i]);\r\n        buffer[i] = uncompressionResult.buffer;\r\n        dataType = uncompressionResult.dataType;\r\n      }\r\n    } else {\r\n      //all other cases \r\n      const uncompressionResult = uncompressBuffer(buffer);\r\n      buffer = uncompressionResult.buffer;\r\n      dataType = uncompressionResult.dataType;\r\n    }\r\n    spaceIndex = buffer.indexOf(\" \");\r\n  }\r\n\r\n  switch (dataType) {\r\n    case CMD_INT:\r\n      parsedData = parseInt(buffer.subarray(1, buffer.length - 1).toString('utf8'));\r\n      break;\r\n    case CMD_FLOAT:\r\n      parsedData = parseFloat(buffer.subarray(1, buffer.length - 1).toString('utf8'));\r\n      break;\r\n    case CMD_NULL:\r\n      parsedData = null;\r\n      break;\r\n    case CMD_STRING:\r\n      parsedData = buffer.subarray(spaceIndex + 1, buffer.length).toString('utf8');\r\n      break;\r\n    case CMD_ZEROSTRING:\r\n      parsedData = buffer.subarray(spaceIndex + 1, buffer.length - 1).toString('utf8');\r\n      break;\r\n    case CMD_COMMAND:\r\n      parsedData = buffer.subarray(spaceIndex + 1, buffer.length).toString('utf8');\r\n      break;\r\n    case CMD_JSON:\r\n      parsedData = JSON.parse(buffer.subarray(spaceIndex + 1, buffer.length).toString('utf8'));\r\n      break;\r\n    case CMD_BLOB:\r\n      parsedData = buffer.subarray(spaceIndex + 1, buffer.length);\r\n      break;\r\n    case CMD_ERROR:\r\n      const error = buffer.subarray(spaceIndex + 1, buffer.length);\r\n      var errorCode = error.subarray(0, error.indexOf(\" \"));\r\n      var extErrCode = \"0\";\r\n      var offsetCode = \"-1\";\r\n      if (errorCode.indexOf(\":\") !== -1) {\r\n        extErrCode = errorCode.subarray(errorCode.indexOf(\":\") + 1, errorCode.length);\r\n        if (extErrCode.indexOf(\":\") !== -1) {\r\n          offsetCode = extErrCode.subarray(extErrCode.indexOf(\":\") + 1, extErrCode.length).toString('utf8');\r\n          extErrCode = extErrCode.subarray(0, extErrCode.indexOf(\":\"));\r\n        }\r\n        extErrCode = extErrCode.toString('utf8');\r\n        errorCode = errorCode.subarray(0, errorCode.indexOf(\":\")).toString('utf8');\r\n      }\r\n      const errorMessage = error.subarray(error.indexOf(\" \") + 1, error.length).toString('utf8');\r\n      var scspError = new Error(errorMessage);\r\n      scspError.code = parseInt(errorCode);\r\n      scspError.extErrCode = parseInt(extErrCode);\r\n      scspError.offsetCode = parseInt(offsetCode);\r\n      throw scspError;\r\n    case CMD_ARRAY:\r\n      const array = buffer.subarray(spaceIndex + 1, buffer.length);\r\n      //extract array items number\r\n      const itemsNumber = parseInt(array.subarray(0, spaceIndex - 2).toString('utf8'));\r\n      var arrayItems = array.subarray(array.indexOf(\" \") + 1, array.length);\r\n      parsedData = [];\r\n      if (itemsNumber > 0) {\r\n        for (var i = 0; i < itemsNumber; i++) {\r\n          const dataType = arrayItems.subarray(0, 1).toString('utf8');\r\n          const hasCommandLen = hasCommandlen(dataType);\r\n          if (hasCommandLen) {\r\n            const lenToRead = parseLen(arrayItems);\r\n            parsedData.push(parseData(arrayItems.subarray(0, arrayItems.indexOf(\" \") + 1 + lenToRead)));\r\n            arrayItems = arrayItems.subarray(arrayItems.indexOf(\" \") + 1 + lenToRead, arrayItems.length);\r\n          } else {\r\n            parsedData.push(parseData(arrayItems.subarray(0, arrayItems.indexOf(\" \"))));\r\n            arrayItems = arrayItems.subarray(arrayItems.indexOf(\" \") + 1, arrayItems.length);\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    case CMD_ROWSET:\r\n      var rowset = buffer.subarray(spaceIndex + 1, buffer.length);\r\n      //extract rowset version\r\n      var version = parseInt(rowset.subarray(rowset.indexOf(\":\") + 1, rowset.indexOf(\" \") + 1).toString('utf8'));\r\n      //extract rowset rows number\r\n      rowset = rowset.subarray(rowset.indexOf(\" \") + 1, rowset.length);\r\n      var nRows = parseInt(rowset.subarray(0, rowset.indexOf(\" \") + 1).toString('utf8'));\r\n      //extract rowset cols number\r\n      rowset = rowset.subarray(rowset.indexOf(\" \") + 1, rowset.length);\r\n      var nCols = parseInt(rowset.subarray(0, rowset.indexOf(\" \") + 1).toString('utf8'));\r\n      //extract rowset data\r\n      rowset = rowset.subarray(rowset.indexOf(\" \") + 1, rowset.length);\r\n      //extract cols name\r\n      var colsName = [];\r\n      for (var i = 0; i < nCols; i++) {\r\n        const dataType = rowset.subarray(0, 1).toString('utf8');\r\n        const lenToRead = parseLen(rowset);\r\n        colsName.push(parseData(rowset.subarray(0, rowset.indexOf(\" \") + 1 + lenToRead)));\r\n        rowset = rowset.subarray(rowset.indexOf(\" \") + 1 + lenToRead, rowset.length);\r\n      }\r\n      //extract single rowset item\r\n      var data = [];\r\n      for (var j = 0; j < nRows * nCols; j++) {\r\n        const dataType = rowset.subarray(0, 1).toString('utf8');\r\n        const hasCommandLen = hasCommandlen(dataType);\r\n        if (hasCommandLen) {\r\n          const lenToRead = parseLen(rowset);\r\n          data.push(rowset.subarray(0, rowset.indexOf(\" \") + 1 + lenToRead));\r\n          rowset = rowset.subarray(rowset.indexOf(\" \") + 1 + lenToRead, rowset.length);\r\n        } else {\r\n          data.push(rowset.subarray(0, rowset.indexOf(\" \")));\r\n          rowset = rowset.subarray(rowset.indexOf(\" \") + 1, rowset.length);\r\n        }\r\n      }\r\n      parsedData = new SQCloudRowset({\r\n        version: version,\r\n        nRows: nRows,\r\n        nCols: nCols,\r\n        colsName: colsName,\r\n        data: data,\r\n      });\r\n      break;\r\n    case CMD_ROWSET_CHUNK:\r\n      var version;\r\n      var nRows = 0;\r\n      var nCols = 0;\r\n      var colsName = [];\r\n      var data = [];\r\n      for (var i = 0; i < buffer.length; i++) {\r\n        var rowset = buffer[i];\r\n        var spaceIndex = rowset.indexOf(\" \");\r\n        rowset = rowset.subarray(spaceIndex + 1, rowset.length);\r\n        var chunkIndex = parseInt(rowset.subarray(0, rowset.indexOf(\" \")).toString('utf8'));\r\n        version = parseInt(rowset.subarray(rowset.indexOf(\":\") + 1, rowset.indexOf(\" \")).toString('utf8'));\r\n        //extract rowset rows number\r\n        rowset = rowset.subarray(rowset.indexOf(\" \") + 1, rowset.length);\r\n        var nRowsSingleChunk = parseInt(rowset.subarray(0, rowset.indexOf(\" \") + 1).toString('utf8'));\r\n        nRows = nRows + nRowsSingleChunk;\r\n        //extract rowset cols number\r\n        rowset = rowset.subarray(rowset.indexOf(\" \") + 1, rowset.length);\r\n        nCols = parseInt(rowset.subarray(0, rowset.indexOf(\" \") + 1).toString('utf8'));\r\n        //extract rowset data\r\n        rowset = rowset.subarray(rowset.indexOf(\" \") + 1, rowset.length);\r\n        if (chunkIndex === 1) {\r\n          //extract cols name\r\n          for (var j = 0; j < nCols; j++) {\r\n            const dataType = rowset.subarray(0, 1).toString('utf8');\r\n            const lenToRead = parseLen(rowset);\r\n            colsName.push(parseData(rowset.subarray(0, rowset.indexOf(\" \") + 1 + lenToRead)));\r\n            rowset = rowset.subarray(rowset.indexOf(\" \") + 1 + lenToRead, rowset.length);\r\n          }\r\n        }\r\n        //extract single rowset item\r\n        for (var k = 0; k < nRowsSingleChunk * nCols; k++) {\r\n          const dataType = rowset.subarray(0, 1).toString('utf8');\r\n          const hasCommandLen = hasCommandlen(dataType);\r\n          if (hasCommandLen) {\r\n            const lenToRead = parseLen(rowset);\r\n            data.push(rowset.subarray(0, rowset.indexOf(\" \") + 1 + lenToRead));\r\n            rowset = rowset.subarray(rowset.indexOf(\" \") + 1 + lenToRead, rowset.length);\r\n          } else {\r\n            data.push(rowset.subarray(0, rowset.indexOf(\" \")));\r\n            rowset = rowset.subarray(rowset.indexOf(\" \") + 1, rowset.length);\r\n          }\r\n        }\r\n      }\r\n      return parsedData = new SQCloudRowset({\r\n        version: version,\r\n        nRows: nRows,\r\n        nCols: nCols,\r\n        colsName: colsName,\r\n        data: data,\r\n      });\r\n      break;\r\n    default:\r\n      parsedData = `Data type${dataType} is not defined in SCSP`;\r\n      console.log(`Data type${dataType} is not defined in SCSP`);\r\n      throw new TypeError(`Data type${dataType} is not defined in SCSP`);\r\n  }\r\n  return parsedData;\r\n}\r\n/*\r\ncustom class used to return rowset data\r\n*/\r\nclass SQCloudRowset {\r\n  #data = [];\r\n  version;\r\n  nRows = 0;\r\n  nCols = 0;\r\n  colsName = [];\r\n  /*\r\n  SQCloudRowset constructor\r\n  */\r\n  constructor(parsedData) {\r\n    this.#data = parsedData.data;\r\n    this.version = parsedData.version;\r\n    this.nRows = parsedData.nRows;\r\n    this.nCols = parsedData.nCols;\r\n    this.colsName = parsedData.colsName;\r\n  }\r\n  /*\r\n  method returns rowset version\r\n  */\r\n  get version() {\r\n    return this.version;\r\n  }\r\n  /*\r\n  method returns rowset row numbers\r\n  */\r\n  get nRows() {\r\n    return this.nRows;\r\n  }\r\n  /*\r\n  method returns rowset cols numbers\r\n  */\r\n  get nCols() {\r\n    return this.nCols;\r\n  }\r\n  /*\r\n  private method check if provided rows and cols not exceed rowset dimensions  \r\n  */\r\n  #sanityCheck(row, col) {\r\n    if ((row >= this.nRows) || (col >= this.nCols)) return false;\r\n    return true\r\n  }\r\n  /*\r\n  method that parse and return item at specific position\r\n  */\r\n  getItem(row, col) {\r\n    if (!this.#sanityCheck(row, col)) throw new RangeError(`row value has to be less than ${this.nRows} and col value has to be less than ${this.nCols}`);\r\n    else {\r\n      const item = this.#data[row * this.nCols + col];\r\n      return parseData(item);\r\n    }\r\n  }\r\n  /*\r\n  method that returns all items in rowset\r\n  */\r\n  dump() {\r\n    var dumpedRowset = [];\r\n    for (var i = 0; i < this.nRows; i++) {\r\n      var row = \"| \";\r\n      for (var j = 0; j < this.nCols; j++) {\r\n        row = row + this.getItem(i, j) + \" | \";\r\n      }\r\n      dumpedRowset.push(row);\r\n    }\r\n    return dumpedRowset;\r\n  }\r\n}\r\n/*\r\nSQLiteCloud class\r\n*/\r\nexport default class SQLiteCloud {\r\n  /* PRIVATE PROPERTIES */\r\n  /* tls client */\r\n  #client = null;\r\n  #clientId = \"\";\r\n  /* tls options */\r\n  #host = null;\r\n  #port = null;\r\n  #disableTLS = {};\r\n  #tlsOptions = {};\r\n  /* auth credential */\r\n  #user = null;\r\n  #password = null;\r\n  /*\r\n  #initCommands contains all the commands sent during authentication\r\n  the first command is always the auth command\r\n  the following commands are custom configurations\r\n  */\r\n  #initCommands = null;\r\n  /*\r\n  incoming data could arrive on multiple ondata event. \r\n  so is necessary to concatenate them\r\n  */\r\n  /* \r\n  #requestTimeout property stores the time available to receive a response before the request times out \r\n  */\r\n  #queryTimeout = 300000;\r\n  /* \r\n  #debug_sdk \r\n  */\r\n  #debug_sdk = false;\r\n  /* CONSTRUCTOR */\r\n  /*\r\n  SQLiteCloud class constructor receives:\r\n    - config = {\r\n        clientId: string, // optional identifier\r\n        user: string, //required unless connectionString is provided\r\n        password: string, //required unless connectionString is provided\r\n        passwordHashed: boolean, //optional true if password is hashed, default is false\r\n        host: string, //required unless connectionString is provided\r\n        port: number, //required unless connectionString is provided\r\n        connectionString: string, //required unless user, password, host, port are provided\r\n        tlsOptions: any, //optional passed directly to node.TLSSocket, supports all tls.connect options\r\n        queryTimeout: number, //optional number of milliseconds before a query call will timeout, default is 300sec\r\n        disableTLS: boolean//optional, if true disable TLS authentication\r\n        database: string, // TODOOO\r\n        dbCreate: boolean, // TODOOO\r\n        dbMemory: boolean, // TODOOO\r\n        sqliteMode: boolean, // TODOOO\r\n        compression: boolean, // TODOOO\r\n        zeroText: boolean, // TODOOO\r\n        nonlinearizable: boolean, // TODOOO\r\n        noBlob: boolean, // TODOOO\r\n        maxData: integer, // TODOOO\r\n        maxRows: integer, // TODOOO\r\n        maxRowset: integer, // TODOOO\r\n        //statement_timeout?: number, // number of milliseconds before a statement in query will time out, default is no timeout\r\n        //application_name?: string, // The name of the application that created this Client instance\r\n        //connectionTimeoutMillis?: number, // number of milliseconds to wait for connection, default is no timeout\r\n        //idle_in_transaction_session_timeout?: number // number of milliseconds before terminating any session with an open idle transaction, default is no timeout\r\n      }\r\n    - debug_sdk\r\n  */\r\n  constructor(config, debug_sdk = false) {\r\n    this.#debug_sdk = debug_sdk;\r\n    this.#clientId = config.clientId;\r\n    this.#disableTLS = config.disableTLS ? config.disableTLS : false;\r\n    if (config.connectionString) {\r\n      //TODOO exctract from connectionString tls options \r\n    } else {\r\n      this.#host = config.host;\r\n      this.#port = config.port;\r\n      this.#tlsOptions = config.tlsOptions ? config.tlsOptions : {};\r\n      this.#user = config.user;\r\n      this.#password = config.password;\r\n      //start building the initial commands sent after the creation of the tls connection\r\n      this.#initCommands = `AUTH USER ${this.#user} ${config.passwordHashed ? \"HASH\" : \"PASSWORD\"} ${this.#password};`;\r\n      if (config.database) {\r\n        if (config.dbCreate && !config.dbMemory) this.#initCommands += `CREATE DATABASE ${config.database} IF NOT EXISTS;`;\r\n        this.#initCommands += `USE DATABASE ${config.database};`;\r\n      }\r\n      if (config.sqliteMode) {\r\n        this.#initCommands += `SET CLIENT KEY SQLITE TO 1;`;\r\n      }\r\n      if (config.compression) {\r\n        this.#initCommands += `SET CLIENT KEY COMPRESSION TO 1;`;\r\n      }\r\n      if (config.zeroText) {\r\n        this.#initCommands += `SET CLIENT KEY ZEROTEXT TO 1;`;\r\n      }\r\n      if (config.nonlinearizable) {\r\n        this.#initCommands += `SET CLIENT KEY NONLINEARIZABLE TO 1;`;\r\n      }\r\n      if (config.noBlob) {\r\n        this.#initCommands += `SET CLIENT KEY NOBLOB TO 1;`;\r\n      }\r\n      if (config.maxData) {\r\n        this.#initCommands += `SET CLIENT KEY MAXDATA TO ${maxData};`;\r\n      }\r\n      if (config.maxRows) {\r\n        this.#initCommands += `SET CLIENT KEY MAXROWS TO ${maxRows};`;\r\n      }\r\n      if (config.maxRowset) {\r\n        this.#initCommands += `SET CLIENT KEY MAXROWSET TO ${maxRowset};`;\r\n      }\r\n    }\r\n    //set custom queryTimeout if provided by the user\r\n    if (config.queryTimeout) {\r\n      this.#queryTimeout = config.queryTimeout;\r\n    }\r\n  }\r\n  /*\r\n  COMPOSE SCSP PROTOCOL\r\n  */\r\n  #composeScspStrings(str) {\r\n    const strLen = Buffer.byteLength(str, \"utf-8\");\r\n    return `+${strLen} ${str}`\r\n  }\r\n  /*\r\n  check if all bytes have been received\r\n  */\r\n  #receivedAllBytes(buffer, lenToRead) {\r\n    return (buffer.length - buffer.indexOf(\" \") - 1) == lenToRead ? true : false;\r\n  }\r\n  /*\r\n  connect method is called to open a tls connection \r\n  right after being authorized sends the auth command \r\n  and the configurations commands setted by the user\r\n  */\r\n  connect() {\r\n    return new Promise((resolve, reject) => {\r\n      //before connecting check if auth credential have been provided\r\n      if (!this.#user || !this.#password) {\r\n        var authError = new TypeError(\"The \\\"config.user\\\" or \\\"config.password\\\" argument must be specified\");\r\n        authError.code = \"ERR_MISSING_ARGS\";\r\n        reject(authError);\r\n      }\r\n      //before connecting check if queryTimeout value is valid\r\n      if (this.#queryTimeout) {\r\n        var timeoutError;\r\n        if (typeof this.#queryTimeout !== \"number\") {\r\n          timeoutError = new TypeError(\"The \\\"config.queryTimeout\\\" must be one of type number. Received \" + typeof this.#queryTimeout);\r\n          timeoutError.code = \"ERR_INVALID_ARG_TYPE\";\r\n        } else if (this.#queryTimeout < 0) {\r\n          timeoutError = new RangeError(\"The \\\"config.queryTimeout\\\" must be greater then 0. Received \" + this.#queryTimeout);\r\n          timeoutError.code = \"ERR_INVALID_ARG_RANGE\";\r\n        }\r\n        if (timeoutError) reject(timeoutError);\r\n      }\r\n      //try to connect\r\n      var client;\r\n      if (!this.#disableTLS) {\r\n        client = new tls.connect(this.#port, this.#host, this.#tlsOptions, async () => {\r\n          if (client.authorized) {\r\n            if (this.#debug_sdk) logThis(this.#clientId, \"connection authorized\");\r\n            if (this.#debug_sdk) logThis(this.#clientId, \"sending init commands: \" + this.#initCommands);\r\n            try {\r\n              this.#client = client;\r\n              const response = await this.sendCommands(this.#initCommands);\r\n              resolve(response);\r\n            } catch (error) {\r\n              logThis(this.#clientId, \"initCommandsResponse error\");\r\n              reject(error);\r\n            }\r\n          } else {\r\n            if (this.#debug_sdk) logThis(this.#clientId, \"connection NOT authorized\");\r\n            reject(\r\n              new Error(\"Connection NOT authorized\", { cause: client.authorizationError })\r\n            );\r\n          }\r\n        })\r\n          .on('close', () => {\r\n            if (this.#debug_sdk) logThis(this.#clientId, \"connection closed\");\r\n          })\r\n          .on('end', () => {\r\n            if (this.#debug_sdk) logThis(this.#clientId, \"end connection\");\r\n          })\r\n          .once('error', (error) => {\r\n            if (this.#debug_sdk) logThis(this.#clientId, \"received error\");\r\n            if (this.#debug_sdk) console.log(error);\r\n            client.destroy();\r\n            reject(\r\n              new Error(\"Connection on error event\", { cause: error })\r\n            );\r\n          });\r\n      } else {\r\n        client = new net.connect(this.#port, this.#host, this.#tlsOptions, async () => {\r\n          if (this.#debug_sdk) logThis(this.#clientId, \"connection created\");\r\n          if (this.#debug_sdk) logThis(this.#clientId, \"sending init commands: \" + this.#initCommands);\r\n          try {\r\n            this.#client = client;\r\n            const response = await this.sendCommands(this.#initCommands);\r\n            resolve(response);\r\n          } catch (error) {\r\n            logThis(this.#clientId, \"initCommandsResponse error\");\r\n            reject(error);\r\n          }\r\n        })\r\n          .on('close', () => {\r\n            if (this.#debug_sdk) logThis(this.#clientId, \"connection closed\");\r\n          })\r\n          .on('end', () => {\r\n            if (this.#debug_sdk) logThis(this.#clientId, \"end connection\");\r\n          })\r\n          .once('error', (error) => {\r\n            if (this.#debug_sdk) logThis(this.#clientId, \"received error\");\r\n            if (this.#debug_sdk) console.log(error);\r\n            client.destroy();\r\n            reject(\r\n              new Error(\"Connection on error event\", { cause: error })\r\n            );\r\n          });\r\n      }\r\n    });\r\n  }\r\n  /*\r\n  method send commands to the server creating a Promise that \r\n  - resolve when all data  have been received and parsed accordingly to SCSP protocol\r\n  - reject when timeout is reached\r\n  */\r\n  sendCommands(commands) {\r\n    //compose commands following SCPC protocol\r\n    commands = this.#composeScspStrings(commands);\r\n    //commands is sent to the server\r\n    var buffer = Buffer.alloc(0); //variable where all received data are concatenated\r\n    //dedicated variable to rowset_chunk data type\r\n    var rowsetChunkArray = []; //used only in case of rowset_chunk datatype to store all received chunk avoiding buffer copy\r\n    if (this.#debug_sdk) logThis(this.#clientId, \"recevied new command to be sent: \" + commands);\r\n    //define the Promise that waits for the server response \r\n    return new Promise((resolve, reject) => {\r\n      //define what to do if an answer does not arrive within the set timeout\r\n      var readDataTimeout;\r\n      const readData = (data) => {\r\n        if (this.#debug_sdk) logThis(this.#clientId, \"onData event: \" + data);\r\n        //on first ondata event, dataType is read from data, on subsequent ondata event, is read from buffer that is the concatanations of data received on each ondata event\r\n        const dataType = buffer.length === 0 ? data.subarray(0, 1).toString('utf8') : buffer.subarray(0, 1).toString('utf8');\r\n        buffer = Buffer.concat([buffer, data]);\r\n        const hasCommandLen = hasCommandlen(dataType);\r\n        if (this.#debug_sdk) logThis(this.#clientId, \"New data has command LEN? \" + hasCommandLen);\r\n        if (hasCommandLen) {\r\n          var lenToRead;\r\n          lenToRead = parseLen(buffer);\r\n          if (this.#debug_sdk) logThis(this.#clientId, \"Reading new data with LEN: \" + lenToRead);\r\n          //in case of compressed data, extract the dataType of compressed data\r\n          if (dataType === CMD_COMPRESSED) {\r\n            //remove LEN\r\n            var compressedBuffer = buffer.subarray(buffer.indexOf(\" \") + 1, buffer.length);\r\n            //remove compressed size\r\n            compressedBuffer = compressedBuffer.subarray(compressedBuffer.indexOf(\" \") + 1, compressedBuffer.length);\r\n            //remove uncompressed size\r\n            compressedBuffer = compressedBuffer.subarray(compressedBuffer.indexOf(\" \") + 1, compressedBuffer.length);\r\n            var compressedDataType = compressedBuffer.subarray(0, 1).toString('utf8');\r\n          }\r\n          if (this.#receivedAllBytes(buffer, lenToRead)) {\r\n            if (\r\n              dataType !== CMD_ROWSET_CHUNK\r\n              &&\r\n              compressedDataType !== CMD_ROWSET_CHUNK\r\n            ) {\r\n              this.#client.off('data', readData);\r\n              clearTimeout(readDataTimeout);\r\n              try {\r\n                const parsedData = parseData(buffer);\r\n                resolve(parsedData);\r\n              } catch (error) {\r\n                reject(error);\r\n              }\r\n            } else {\r\n              //check if in case of chunk rowset has been received the ending chunk\r\n              if (data.subarray(data.indexOf(\" \") + 1, data.length).toString('utf8') === \"0 0 0 \") {\r\n                clearTimeout(readDataTimeout);\r\n                try {\r\n                  const parsedData = parseData(rowsetChunkArray);\r\n                  resolve(parsedData);\r\n                } catch (error) {\r\n                  reject(error);\r\n                }\r\n              } else {\r\n                //when not received the ending chunk ask server for another chunk\r\n                rowsetChunkArray.push(buffer);\r\n                buffer = Buffer.alloc(0);\r\n                this.#client.write(this.#composeScspStrings(\"OK\"));\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          // it is a command with no explicit len\r\n          // so make sure that the final character is a space\r\n          const lastChr = buffer.subarray(buffer.length - 1, buffer.length).toString('utf8');\r\n          if (this.#debug_sdk) logThis(this.#clientId, \"Reading new data without command LEN\");\r\n          if (lastChr == \" \") {\r\n            if (this.#debug_sdk) logThis(this.#clientId, \"Reading complete, endining with space\");\r\n            //quando faccio il parsing mi passo il tipo, la lunghezza, e il buffer\r\n            this.#client.off('data', readData);\r\n            clearTimeout(readDataTimeout);\r\n            try {\r\n              const parsedData = parseData(buffer);\r\n              resolve(parsedData);\r\n            } catch (error) {\r\n              reject(error);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this.#client.write(commands, 'utf8', () => {\r\n        readDataTimeout = setTimeout(() => {\r\n          this.#client.off('data', readData);\r\n          clearTimeout(readDataTimeout);\r\n          reject(new Error(\"Request timed out\", { cause: commands }));\r\n        }, this.#queryTimeout);\r\n        this.#client.on('data', readData);\r\n      });\r\n      this.#client\r\n        .once('error', (error) => {\r\n          if (this.#debug_sdk) logThis(this.#clientId, \"received error\");\r\n          if (this.#debug_sdk) console.log(error);\r\n          client.destroy();\r\n          reject(\r\n            new Error(\"Connection on error event\", { cause: error })\r\n          );\r\n        });\r\n    })\r\n  }\r\n\r\n  /*\r\n  method called to close socket connection\r\n  */\r\n  disconnect() {\r\n    return new Promise((resolve, reject) => {\r\n      this.#client.end(() => {\r\n        if (this.#debug_sdk) logThis(this.#clientId, \"closing connection\")\r\n        resolve(\r\n          `Closed connection for clientId ${this.#clientId}`\r\n        );\r\n      });\r\n    })\r\n  }\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__43__;","module.exports = __WEBPACK_EXTERNAL_MODULE__548__;","module.exports = __WEBPACK_EXTERNAL_MODULE__535__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(763);\n"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__535__","__WEBPACK_EXTERNAL_MODULE__548__","__WEBPACK_EXTERNAL_MODULE__43__","tls","net","lz4","logThis","id","msg","dateObject","Date","date","getDate","slice","month","getMonth","prefix","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","console","log","hasCommandlen","firstCharacter","parseLen","data","parseInt","subarray","indexOf","toString","uncompressBuffer","buffer","spaceIndex","length","compressedSize","uncompressedSize","dataType","uncompressedBuffer","Buffer","alloc","uncompressionResult","decodeBlock","concat","Error","parseData","parsedData","Array","isArray","i","parseFloat","JSON","parse","error","errorCode","extErrCode","offsetCode","errorMessage","scspError","code","array","itemsNumber","arrayItems","lenToRead","push","rowset","version","nRows","nCols","colsName","j","SQCloudRowset","chunkIndex","nRowsSingleChunk","k","TypeError","constructor","row","col","getItem","item","RangeError","dump","dumpedRowset","SQLiteCloud","config","debug_sdk","clientId","disableTLS","connectionString","host","port","tlsOptions","user","password","passwordHashed","database","dbCreate","dbMemory","sqliteMode","compression","zeroText","nonlinearizable","noBlob","maxData","maxRows","maxRowset","queryTimeout","str","byteLength","connect","Promise","resolve","reject","authError","timeoutError","client","async","response","sendCommands","on","once","destroy","cause","authorized","authorizationError","commands","rowsetChunkArray","readDataTimeout","readData","hasCommandLen","compressedBuffer","compressedDataType","off","clearTimeout","write","lastChr","setTimeout","disconnect","end","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call"],"sourceRoot":""}