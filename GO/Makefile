# Pre-requirements
install-prerequirements:	liner term docopt-go dburl lz4 godoc gosec gorilla ini go-svc kardianos

# liner
liner:
ifeq ($(wildcard src/github.com/peterh),)
	-go get -v github.com/peterh/liner
endif

# term
term:
ifeq ($(wildcard src/golang.org/x/term),)
	-go get -v golang.org/x/term
endif

# Command line arguments
docopt-go:
ifeq ($(wildcard src/github.com/docopt),)
	go get -v github.com/docopt/docopt-go
endif

# Connection strings
dburl:
ifeq ($(wildcard src/github.com/xo),)
	go get -v github.com/xo/dburl
endif

# LZ4 compression
lz4:
ifeq ($(wildcard src/github.com/pierrec),)
	go get -v github.com/pierrec/lz4
endif

# Godoc
godoc:
ifeq ($(wildcard bin/godoc),)
	go get -u golang.org/x/tools/cmd/godoc
endif

# gosec
gosec:
ifeq ($(wildcard bin/gosec),)
	curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh
endif


# gorilla
gorilla:
ifeq ($(wildcard src/github.com/gorilla),)
	go get github.com/gorilla/websocket
	go get -u github.com/gorilla/mux
endif

# ini
ini:
ifeq ($(wildcard src/gopkg.in/ini.v1),)
	git config --global http.sslverify "false"
	go get gopkg.in/ini.v1
	git config --global http.sslverify "true"
endif

# kardianos
kardianos:
ifeq ($(wildcard src/github.com/kardianos),)
	go get github.com/kardianos/service
endif



# Test Programs
bin/tls-test1:	sdk src/Test/tls-test1.go
	go build -o bin/tls-test1 src/Test/tls-test1.go

bin/tls-server:	sdk src/Test/tls-server.go
	go build -o bin/tls-server src/Test/tls-server.go
	
bin/tls-dump1:	sdk src/Test/tls-dump1.go
	go build -o bin/tls-dump1 src/Test/tls-dump1.go
	
bin/tls-dump2:	sdk src/Test/tls-dump2.go
	go build -o bin/tls-dump2 src/Test/tls-dump2.go
	
bin/tls-dump3:	sdk src/Test/tls-dump3.go
	go build -o bin/tls-dump3 src/Test/tls-dump3.go

bin/tls-compress:	sdk src/Test/tls-compress.go
	go build -o bin/tls-compress src/Test/tls-compress.go
		
bin/tls-literals:	sdk src/Test/tls-literals.go
	go build -o bin/tls-literals src/Test/tls-literals.go

bin/tls-pubsub:	sdk src/Test/tls-pubsub.go
	go build -o bin/tls-pubsub src/Test/tls-pubsub.go

test:	bin/tls-test1 bin/tls-server bin/tls-dump1 bin/tls-dump2 bin/tls-dump3 bin/tls-compress bin/tls-literals bin/tls-pubsub

# GO SDK
sdk:	install-prerequirements src/sqlitecloud/*.go


# CLI App
bin/sqlc:	sdk src/CLI/sqlc.go
	go build -o bin/sqlc src/CLI/sqlc.go
	
cli: bin/sqlc

github:
	open https://github.com/sqlitecloud/sdk 
	
diff:
	git difftool
	
checksec:	gosec src/sqlitecloud/*.go
	./bin/gosec ./src/sqlitecloud/
	# ./bin/gosec ./src/CLI/

# Documentation
doc:	godoc
	@echo "Hit CRTL-C to stop the documentation server..."
	@( sleep 1 && open http://localhost:6060/pkg/sqlitecloud/ ) &
	@./bin/godoc -http=:6060 -index -play -goroot ./src/sqlitecloud

clean:
	rm -rf rm -rf src/github.com src/golang.org/
	rm -rf src/Test/test1

all: sdk cli test