--set dbname=concurrent-use-database.sqlite
--set n=10

--// create a database 
CREATE DATABASE {{.dbname}} IF NOT EXISTS; USE DATABASE {{.dbname}};
--match type is ok
CREATE TABLE IF NOT EXISTS t1(a INTEGER PRIMARY KEY, b); DELETE FROM t1;
--match type is ok

INSERT INTO t1 (b) VALUES (randomblob(100000));
-- --dump

--// create n workers connected to a follower node, each worker use the database 
--loop i=1; i<=n; i=i+1;
    --task i name read-workers
        USE DATABASE {{.dbname}}
        -- // must not fail, otherwise there is an concurrency issue 
        --match type is OK
    --end
--end

--wait all

--// start a query on each worker, it should work fine on some workers and should return error on others
--loop i=1; i<=n; i=i+1;
    --task i
        WITH RECURSIVE cnt(x) AS ( SELECT 1 UNION ALL SELECT x+1 FROM cnt LIMIT 10000000 ) SELECT x FROM cnt WHERE x=10000000; 
        SELECT sum(length(b)) FROM t1;
        --exit
    --end
--end

--// While queries are executed on the follower, call UNUSE the DB on the main worker 
--// and DROP the database on the leader. It will succeed on the leader because no clients
--// currently use the db, but also the follower must be able to DROP the DB even if there
--// are connected clients, the node must not crash and clients using that db must be disconnected.
--// But first wait a while so workers can start the slow query.
--sleep 1000
LIST CONNECTIONS 
--match type is ROWSET 

UNUSE DATABASE 
DROP DATABASE {{.dbname}}
--// must fail because there are connections using the db
--match type is ERROR 

--wait all

LIST CONNECTIONS 
-- --dump
--match rows 1